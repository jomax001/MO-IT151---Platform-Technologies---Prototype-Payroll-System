/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package employee.service;

import java.sql.Connection;
import utils.DBConnection;
import utils.DBConnection;
import gui.HRDashboard;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author Jomax
 */
public class ManageEmployeeForm extends javax.swing.JFrame {

    private String[] lastDeletedEmployee = null;
    private Connection conn;

    /**
     * Creates new form ManageEmployeeForm
     */
    public ManageEmployeeForm() {
    initComponents();
    setLocationRelativeTo(null);

    // Database connection test
    this.conn = DBConnection.getConnection();
    if (conn != null) {
        System.out.println("Connected to PostgreSQL successfully!");
    } else {
        System.out.println("Connection failed.");
    }
    loadEmployees(); // <- This is correct here
}
private void loadEmployees() {
    try {
        this.conn = DBConnection.getConnection();
        String sql = "SELECT * FROM employees";
        PreparedStatement pst = conn.prepareStatement(sql);
        java.sql.ResultSet rs = pst.executeQuery();

        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear table first

        while (rs.next()) {
            Object[] row = {
                rs.getString("id"),
                rs.getString("name"),
                rs.getString("position"),
                rs.getString("department"),
                rs.getDouble("salary"),
                rs.getString("email")
            };
            model.addRow(row);
        }

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Failed to load employees.");
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextEmail = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextEmployeeID = new javax.swing.JTextField();
        jTextName = new javax.swing.JTextField();
        jTextPosition = new javax.swing.JTextField();
        jTextDepartment = new javax.swing.JTextField();
        UmdoDeleteButton = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        jUpdateButton = new javax.swing.JButton();
        jDeleteButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextSalary = new javax.swing.JTextField();
        BackButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Name", "Position", "Department", "Salary", "Email"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 6, 960, 410));
        getContentPane().add(jTextEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 220, 200, -1));

        jLabel1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel1.setText("Employee ID:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 20, 150, -1));

        jLabel2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel2.setText("Email: ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 220, 140, -1));

        jLabel3.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel3.setText("Name:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 60, 150, -1));

        jLabel4.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel4.setText("Position:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 100, 140, -1));

        jLabel5.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel5.setText("Department:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 140, 150, -1));
        getContentPane().add(jTextEmployeeID, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 20, 200, -1));
        getContentPane().add(jTextName, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 60, 200, -1));
        getContentPane().add(jTextPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 100, 200, -1));
        getContentPane().add(jTextDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 140, 200, -1));

        UmdoDeleteButton.setBackground(new java.awt.Color(0, 172, 238));
        UmdoDeleteButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        UmdoDeleteButton.setText("Undo Delete");
        UmdoDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UmdoDeleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(UmdoDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 350, 140, -1));

        AddButton.setBackground(new java.awt.Color(0, 172, 238));
        AddButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });
        getContentPane().add(AddButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 310, 140, -1));

        jUpdateButton.setBackground(new java.awt.Color(0, 172, 238));
        jUpdateButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jUpdateButton.setText("Update");
        jUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 310, 140, -1));

        jDeleteButton.setBackground(new java.awt.Color(0, 172, 238));
        jDeleteButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jDeleteButton.setText("Delete");
        jDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(jDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 350, 140, -1));

        jLabel6.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel6.setText("Salary:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 180, 140, -1));
        getContentPane().add(jTextSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 180, 200, -1));

        BackButton1.setBackground(new java.awt.Color(0, 172, 238));
        BackButton1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        BackButton1.setText("Back");
        BackButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(BackButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 390, 140, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UmdoDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UmdoDeleteButtonActionPerformed
    if (lastDeletedEmployee == null) {
        JOptionPane.showMessageDialog(this, "No recently deleted record to undo.");
        return;
    }

    try {
        this.conn = DBConnection.getConnection();
        String sql = "INSERT INTO employees (id, name, position, department, salary, email) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setInt(1, Integer.parseInt(lastDeletedEmployee[0]));
        pst.setString(2, lastDeletedEmployee[1]);
        pst.setString(3, lastDeletedEmployee[2]);
        pst.setString(4, lastDeletedEmployee[3]);
        pst.setDouble(5, Double.parseDouble(lastDeletedEmployee[4]));
        pst.setString(6, lastDeletedEmployee[5]);

        pst.executeUpdate();
        pst.close();

        JOptionPane.showMessageDialog(this, "Undo successful. Employee restored.");
        lastDeletedEmployee = null;  // Clear after undo
        loadEmployees();

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Undo failed: " + e.getMessage());
    }
    }//GEN-LAST:event_UmdoDeleteButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
    String id = jTextEmployeeID.getText();
    String name = jTextName.getText();
    String position = jTextPosition.getText();
    String department = jTextDepartment.getText();
    String email = jTextEmail.getText();

    try {
        double salary = Double.parseDouble(jTextSalary.getText());

        this.conn = DBConnection.getConnection();
        String sql = "INSERT INTO employees (id, name, position, department, salary, email) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement pst = conn.prepareStatement(sql);

        pst.setString(1, id);
        pst.setString(2, name);
        pst.setString(3, position);
        pst.setString(4, department);
        pst.setDouble(5, salary);
        pst.setString(6, email);

        pst.executeUpdate();
        pst.close();

        JOptionPane.showMessageDialog(null, "Employee added successfully!");
        loadEmployees(); // <-- Refresh the table
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Invalid salary. Please enter a number.");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_AddButtonActionPerformed

    private void jUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateButtonActionPerformed
try (Connection conn = DBConnection.getConnection()) {
        if (conn == null) return;

        String sql = "UPDATE employees SET name=?, position=?, department=?, salary=?, email=? WHERE id=?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, jTextName.getText());
            pstmt.setString(2, jTextPosition.getText());
            pstmt.setString(3, jTextDepartment.getText());
            pstmt.setDouble(4, Double.parseDouble(jTextSalary.getText()));
            pstmt.setString(5, jTextEmail.getText());
            pstmt.setString(6, jTextEmployeeID.getText());

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Employee updated successfully.");
                loadEmployees(); // Use the correct refresh method
            } else {
                JOptionPane.showMessageDialog(this, "Employee not found.");
            }
        }
    } catch (SQLException | NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_jUpdateButtonActionPerformed

    private void jDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteButtonActionPerformed
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        return;
    }

    String id = jTable1.getValueAt(selectedRow, 0).toString(); // ID
    String name = jTable1.getValueAt(selectedRow, 1).toString();
    String position = jTable1.getValueAt(selectedRow, 2).toString();
    String department = jTable1.getValueAt(selectedRow, 3).toString();
    String salary = jTable1.getValueAt(selectedRow, 4).toString();
    String email = jTable1.getValueAt(selectedRow, 5).toString();

    int confirm = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to delete Employee ID: " + id + "?", 
        "Confirm Delete", 
        JOptionPane.YES_NO_OPTION
    );

    if (confirm == JOptionPane.YES_OPTION) {
        try {
            this.conn = DBConnection.getConnection();
            String sql = "DELETE FROM employees WHERE id = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, id);

            int affectedRows = pst.executeUpdate();
            pst.close();

            if (affectedRows > 0) {
                // Save to class variable for undo
                lastDeletedEmployee = new String[] { id, name, position, department, salary, email };
                JOptionPane.showMessageDialog(this, "Employee deleted successfully.");
                loadEmployees(); // Refresh
            } else {
                JOptionPane.showMessageDialog(this, "Employee ID not found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jDeleteButtonActionPerformed

    private void BackButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButton1ActionPerformed
  this.dispose(); // Close the current form
    new HRDashboard().setVisible(true); // Open the previous/main form
    }//GEN-LAST:event_BackButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageEmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageEmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageEmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageEmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
new ManageEmployeeForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton BackButton1;
    private javax.swing.JButton UmdoDeleteButton;
    private javax.swing.JButton jDeleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextDepartment;
    private javax.swing.JTextField jTextEmail;
    private javax.swing.JTextField jTextEmployeeID;
    private javax.swing.JTextField jTextName;
    private javax.swing.JTextField jTextPosition;
    private javax.swing.JTextField jTextSalary;
    private javax.swing.JButton jUpdateButton;
    // End of variables declaration//GEN-END:variables
}

